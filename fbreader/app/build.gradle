import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
	repositories {
		jcenter()
		mavenCentral()
		google()
	}
}

apply plugin: 'com.android.application'

dependencies {
	implementation project(':api')
	api project(':util')
	api project(':common')
	api project(':resources')
	api project(':text-formats')
	api project(':drag-sort-listview')
	api project(':android-filechooser')
	api project(':SuperToasts')
	api project(':AmbilWarna')
	api project(':zip-amse')

    implementation 'com.android.support:multidex:1.0.3'
	implementation 'com.android.support:support-v4:28.0.0'
	implementation ('com.googlecode.json-simple:json-simple:1.1.1') {
		exclude group: 'junit', module: 'junit'
	}

	implementation files('libs/nanohttpd-2.0.5.jar')
	implementation files('libs/httpmime-4.2.5.jar')
	implementation files('libs/pdfparse.jar')
}

android {
	compileSdkVersion project.ext.globalCompileSdkVersion
	buildToolsVersion project.ext.globalBuildToolsVersion
	useLibrary 'org.apache.http.legacy'

	lintOptions {
		abortOnError false
	}

	defaultConfig {
		minSdkVersion project.ext.globalMinSdkVersion
		targetSdkVersion project.ext.globalTargetSdkVersion
		versionCode 0
		versionName new File("$projectDir/VERSION").text.trim()
		multiDexEnabled project.ext.globalMultiDexEnabled

		buildConfigField "String", "FBNETWORK_KEY", "${FBREADER_ORG_FBNETWORK_KEY}"
		buildConfigField "String", "FBNETWORK_SECRET", "${FBREADER_ORG_FBNETWORK_SECRET}"
	}

	sourceSets {
		main.aidl.srcDirs = ['src/main/java']
		main.java.srcDirs = ['src/main/java']
		main.res.srcDirs = ['src/main/res']
		main.assets.srcDirs = ['src/main/assets']
		main.jniLibs.srcDirs = ['src/main/libs']
		main.jni.srcDirs = []
	}

	signingConfigs {
		release {
			storeFile file(RELEASE_STORE_FILE)
			storePassword RELEASE_STORE_PASSWORD
			keyAlias RELEASE_KEY_ALIAS
			keyPassword RELEASE_KEY_PASSWORD
		}
	}

	buildTypes {
		debug {
			applicationIdSuffix '.debug'
			versionNameSuffix '-DEBUG'
		}
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'
			signingConfig signingConfigs.release
		}
	}
}

android {
	flavorDimensions 'abi'

	productFlavors {
		fat {
			dimension 'abi'
			ndk {
				abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
				versionCode 0
			}
		}
		// armv7a {
		// 	dimension 'abi'
		// 	ndk {
		// 		abiFilter 'armeabi-v7a'
		// 		versionCode 1
		// 	}
		// }
		// arm64v8a {
		// 	dimension 'abi'
		// 	ndk {
		// 		abiFilter 'arm64-v8a'
		// 		versionCode 2
		// 	}
		// }
		// x86 {
		// 	dimension 'abi'
		// 	ndk {
		// 		abiFilter 'x86'
		// 		versionCode 3
		// 	}
		// }
		// x8664 {
		// 	dimension 'abi'
		// 	ndk {
		// 		abiFilter 'x86_64'
		// 		versionCode 4
		// 	}
		// }
	}

	task ndkBuild(type: Exec) {
		def ndkDir = project.android.ndkDirectory.absolutePath
		def ndkBuild = Os.isFamily(Os.FAMILY_WINDOWS) ? 'ndk-build.cmd' : 'ndk-build'
		commandLine "$ndkDir/$ndkBuild", '-C', file('src/main/jni').absolutePath
	}

	tasks.withType(JavaCompile) {
		compileTask -> compileTask.dependsOn ndkBuild
	}

	clean {
		delete 'src/main/obj'
		delete 'src/main/libs'
	}
}

android.applicationVariants.all { variant ->
	def abiVersion = variant.productFlavors.get(0).versionCode

	def baseCode = 0
	def version = new File("$projectDir/VERSION").text.trim()
	if (version.matches('\\d*\\.\\d* beta \\d*')) {
		def parts = version.split('[ .]')
		baseCode = parts[0].toInteger() * 1000000 + parts[1].toInteger() * 10000 - 5000 + parts[3].toInteger() * 100
	} else if (version.matches('\\d*\\.\\d* rc \\d*')) {
		def parts = version.split('[ .]')
		baseCode = parts[0].toInteger() * 1000000 + parts[1].toInteger() * 10000 - 2500 + parts[3].toInteger() * 100
	} else if (version.matches('\\d*\\.\\d*')) {
		def parts = version.split('\\.')
		baseCode = parts[0].toInteger() * 1000000 + parts[1].toInteger() * 10000
	} else if (version.matches('\\d*\\.\\d*\\.\\d*')) {
		def parts = version.split('\\.')
		baseCode = parts[0].toInteger() * 1000000 + parts[1].toInteger() * 10000 + parts[2].toInteger() * 100
	} else {
		throw new IllegalArgumentException('Unsupported version format: ' + version)
	}
    variant.outputs.all { output ->
        output.setVersionCodeOverride(baseCode + 10 + abiVersion)
    }
}
